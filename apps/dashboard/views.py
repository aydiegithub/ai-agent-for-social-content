from django.shortcuts import render, redirect
from django.views import View
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib import messages
from django.db import transaction

from .forms import ContentGenerationForm
from .models import ContentHistory
from apps.billing.models import Credits

# I will create this AI engine module later.
# For now, I will simulate its behavior.
# from core.ai_engine import GeminiClient 

# --- Simulated AI Engine ---
# This is a placeholder to simulate the behavior of the real AI engine.
BASE_COST = 1
IMAGE_GENERATION_COST = 3

def generate_content_from_ai(prompt):
    """ 
    Simulates a call to the Gemini API for text generation.
    """
    print(f"--- SIMULATING AI TEXT GENERATION WITH PROMPT ---\n{prompt}\n-------------------------------------------------")
    # In a real scenario, this would make an API call and could fail.
    # I return a dummy response for now.
    
    simulated_response = (
        "This is a simulated AI response based on your prompt."
        "In a real application, this text would be generated by the Google Gemini API. "
        "It would be much longer and more detailed, tailored to the specific inputs "
        "like title, niche, context, and tone provided by the user."
    ) 
    
    return simulated_response

def generate_image_from_ai(prompt):
    """Simulates a call to the Gemini API for image generation."""
    print(f"--- SIMULATING AI IMAGE GENERATION WITH PROMPT ---\n{prompt}\n-------------------------------------------------")
    # Returns a placeholder image URL.
    return "https://placehold.co/1024x1024/e0e7ff/4f46e5?text=AI+Generated+Image"


class DashboardView(LoginRequiredMixin, View):
    """
    The main dashboard view for content generation and history.
    """
    template_name = 'dashboard/dashboard.html'
    form_class = ContentGenerationForm
    
    def get(self, request, *args, **kwargs):
        """ 
        Handles GET requests, displaying the form and user's content history.
        """
        form = self.form_class()
        
        # D1 DATABSE NOTE: These queries will be translated to D1 API calls.
        content_history = ContentHistory.objects.filter(user=request.user)
        user_credits, _ = Credits.objects.get_or_create(user=request.user)
        
        context = {
            'form': form,
            'content_history': content_history,
            'credits': user_credits.balance
        }
        
        return render(request, self.template_name, context)
    
    def post(self, request, *args, **kwargs):
        """
        Handles POST requests, processing the form to generate content.
        """
        form = self.form_class(request.POST)
        
        if form.is_valid():
            # Calculate the cost of this generation request
            cost = BASE_COST
            if form.cleaned_data.get('generate_image'):
                cost += IMAGE_GENERATION_COST
                
            # Check if the user has enough credits.
            user_credits = Credits.objects.get(user=request.user)
            if user_credits.balance < cost:
                messages.error(request, f"You don't have enough credits for this operation. This requires {cost} credits, but you only have {user_credits.balance}.")
                return redirect('dashboard') # We will name this URL later.
            
            # Construct the prompt for the AI
            # This is a crucial step for getting good results
            prompt_data = form.cleaned_data
            prompt = self._build_prompt(prompt_data)
            
            try:
                # Use a database transaction to ensure credit deduction and 
                # content creation happen together or not at all (atomicity)
                with transaction.atomic():
                    # D1 DATABASE NOTE: This block will transalate into a 
                    # series of D1 API calls that should be handed atomically
                    
                    # Call the API to Generate content
                    generated_text = generate_content_from_ai(prompt=prompt)
                    
                    image_url = None
                    if prompt_data.get('generate_image'):
                        image_prompt = f"An image representing: {prompt_data['title']} in the {prompt_data['niche']} niche."
                        image_url = generate_content_from_ai(image_prompt)
                        
                    user_credits.balance -= cost
                    user_credits.save()
                    
                    # Save the generated content to the user's history
                    ContentHistory.objects.create(
                        user=request.user,
                        title=prompt_data['title'],
                        input_params=prompt_data,
                        generated_text=generated_text,
                        generated_image_url=image_url
                    )
                    
                messages.success(request, "Content generated successfully!")
            
            
            except Exception as e:
                # Handle potential errors from the AI or database.
                messages.error(request, f"An error occurred during content generation: {e}")
                
            return redirect('dashboard')
        
        # If form is not valid, re-render the page with errors
        content_history = ContentHistory.objects.filter(user=request.user)
        user_credits, _ = Credits.objects.get_or_create(user=request.user)
        context = {
            'form': form,
            'content_history': content_history,
            'credits': user_credits.balance
        }
        return render(request, self.template_name, context)
    
    def _build_prompt(self, data):
        """
        A helper method to construct a detailed prompt from form data.
        """
        prompt = f"Generate content with the following specifications:\n"
        prompt += f"- Title: {data['title']}\n"
        prompt += f"- Niche/Industry: {data['niche']}\n"
        
        if data.get('tone'):
            prompt += f"- Tone of Voice: {data['tone']}\n"
            
        if data.get('context'):
            prompt += f"- Context/Details to include: {data['context']}\n"
            
        if data.get('tags'):
            prompt += f"- Important Keywords/Tags: {data['tags']}\n"
            
        prompt += "\nPlease provide a comprehensive and well-structured piece of content based on these requirements."
        return prompt